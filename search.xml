<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android通过配置Flavors修改应用图标</title>
      <link href="/2020/01/30/android-flover/"/>
      <url>/2020/01/30/android-flover/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>由于项目需求，有个客户要求对产品的图标和启动页面进行了个性化，这样就引发了两个打包问题：</p><p>1.需要单独给该客户打包</p><p>2.打包过程过于繁琐。打完一个包后，还要替换图标再打另一个。</p><p>这对于习惯偷懒的我来说，是不能容忍的。所以便开始寻找可以自动化且多渠道打包的方案。而Android Studio也相当给力的提供Flavors这一解决方案。</p><h2 id="什么是Flavor"><a href="#什么是Flavor" class="headerlink" title="什么是Flavor"></a>什么是Flavor</h2><p>&emsp;&emsp;Flavor直译过来是“风味/口味”的意思，官方这样命名，应该就是将Android应用看做成一道菜，可以通过不同“口味”的配置，最终可以呈现出的多种不同“风味”的菜品。这个命名已符合Android一贯的习性，从Android历代版本的版本代号就不难看出，什么蛋糕、甜甜圈、泡芙、棒棒糖、奥利奥、馅饼等等，都是和吃相关的，这是一群多么喜欢吃的团队啊。</p><p>&emsp;&emsp;现在拉回正题，相对而言，我更喜欢将Flavor称为“渠道”，这样对我而言更好理解一些。而配置渠道Flavor的方式非常简单，只需要将他们添加到productFlavors{}代码块中就可以了。而好巧不巧，defaultConfig居然是productFlavors的子类，每个渠道Flavor的配置都支持与defaultConfig相同的属性，所以们可以在defaultConfig中配置每个渠道Flavor的基础配置，如applicationId，而每个渠道Flavor也可以修改这些配置。所以渠道中的配置会覆盖defaultConfig中的配置，但是如果在buildType中有相同的配置，渠道Flavor中的配置会被覆盖，具体配置的优先级如下：</p><p>&emsp;&emsp;按优先级从高到低: buildType-&gt;Flavor-&gt;defaultConfig</p><p>&emsp;&emsp;了解了Flavor的基本信息后，我们就可以开始动手解决问题了。</p><h2 id="使用Flavors修改图标"><a href="#使用Flavors修改图标" class="headerlink" title="使用Flavors修改图标"></a>使用Flavors修改图标</h2><h4 id="一、配置渠道"><a href="#一、配置渠道" class="headerlink" title="一、配置渠道"></a>一、配置渠道</h4><p>首先需要在build.gradle中添加productFlavors，并且在productFlavors中配置对应的渠道，用来表示不同的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">  huawei &#123;&#125;</span><br><span class="line">  oppo &#123;&#125;</span><br><span class="line">  vivo &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在各个渠道中，如果有需要，可以修改对应渠道的applicationId、versionName等值，如果没有配置，会默认的使用defaultConfig里面的属性。</p><h4 id="二、资源文件配置"><a href="#二、资源文件配置" class="headerlink" title="二、资源文件配置"></a>二、资源文件配置</h4><p>在build.gradle我们添加了三个渠道，相应的需要在app/src中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── androidTest</span><br><span class="line">├── main</span><br><span class="line">├── libs</span><br><span class="line">├── huawei</span><br><span class="line">└── oppo</span><br><span class="line">└── vivo</span><br></pre></td></tr></table></figure><p>然后在需要替换应用图标的文件夹中添加res资源文件夹，并添加进对应的应用图标文件，注意目录、文件名需要一致，这样构建应用时会替换main中的资源文件。</p>]]></content>
      
      
      <categories>
          
          <category> 开发技能 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
